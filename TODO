# This file is automatically generated by generate_todo.py.
# Files that start with an underscore ("_") have been excluded.

./parsimony/estimators.py:
-------------------------
87: # TODO: Is this a good name?

283: # TODO: Should we use a seed here so that we get deterministic results?

395: # TODO: Should we use a seed somewhere so that we get deterministic results?

510: # TODO: Should we use a seed here so that we get deterministic results?

630: # TODO: Should we use a seed here so that we get deterministic results?

809: # TODO: Should we use a seed here so that we get deterministic
810: # results?

838: # TODO: Should we use a seed here so that we get deterministic
839: # results?

1010: # TODO: Should we use a seed here so that we get deterministic results?

1260: # TODO: Should we use a seed here so that we get deterministic results?

1381: # TODO: Should we use a seed here so that we get deterministic results?

1548: # TODO: Should we use a seed here so that we get deterministic results?

1723: # TODO: Should we use a seed here so that we get deterministic results?

1987: # TODO: Should we use a seed here so that we get deterministic
1988: # results?
1989: #                if w is None or k > 0:

2205: # TODO: Should we use a seed here so that we get deterministic
2206: # results?
2207: #                if w is None or k > 0:

./parsimony/utils/plot.py:
-------------------------
72: # TODO: Add the other cases.

./parsimony/utils/utils.py:
--------------------------
24: #TODO: This depends on the OS. We should try to be clever here ...

./parsimony/utils/stats.py:
--------------------------
122: value = 1.0  # TODO: Is this really correct?

./parsimony/utils/consts.py:
---------------------------
17: # TODO: MAX_ITER is heavily algorithm-dependent, so we have to think about if
18: # we should include a package-wide maximum at all.

./parsimony/utils/linalgs.py:
----------------------------
513: # TODO: Put in compiled code for speed.

536: # TODO: Do this instead: In this case x0 is found trivially and we
537: # recurse to a problem of order n-1.

546: # TODO: Use algorithm for banded matrices instead!

./parsimony/functions/losses.py:
-------------------------------
189: # TODO: Inherit from LinearRegression and add an L2 constraint instead!

369: # TODO: Make the weights sparse.
370: #weights = np.eye(self.X.shape[0])

372: # TODO: Allow the weight vector to be a list.

480: # TODO: Use FastSVD for speedup!

482: self._L = np.max(s) ** 2.0  # TODO: CHECK

646: PWX = 0.5 * np.sqrt(self.weights) * self.X  # TODO: CHECK WITH FOUAD
647: # PW = 0.5 * np.eye(self.X.shape[0]) ## miss np.sqrt(self.W)
648: #PW = 0.5 * np.sqrt(self.W)
649: #PWX = np.dot(PW, self.X)
650: # TODO: Use FastSVD for speedup!

652: self._L = np.max(s) ** 2.0  # TODO: CHECK

657: self._L += self.k  # TODO: CHECK

675: # TODO: Handle mean here?

./parsimony/functions/penalties.py:
----------------------------------
203: # TODO: This should not be able to happen! Do we know it doesn't?

208: # TODO: This should not be able to happen! Do we know it doesn't?

576: # TODO: Check if this is correct!

1342: # TODO: We can share variables between f and df and speed up
1343: # some shared computations.

./parsimony/functions/properties.py:
-----------------------------------
145: # TODO: Should all constraints have the projection operator?

433: # TODO: Should L by default take a weight vector as argument?

795: # TODO: This only work if the elements of self._A are scipy.sparse. We
796: # should allow dense matrices as well.

802: # TODO: Add max_iter here!

870: # TODO: Avoid stacking here.

872: # TODO: Add max_iter here!

./parsimony/functions/combinedfunctions.py:
------------------------------------------
41: # TODO: Add penalty_start and mean to all of these!

113: # TODO: We currently only allow one proximal operator. Fix this!

166: # TODO: We currently only allow one proximal operator. Fix this!

682: # TODO: This is not good. Solve this better!

1238: # TODO: This is not a good solution. Can we solve this in a better way?

1290: # TODO: Use max_iter here!!

1340: # TODO: Kernelise this function! See how I did in
1341: # LinearRegressionL1L2TV._beta_hat.

1392: # TODO: Add this function or refactor API!

1648: # TODO: This is not a nice solution. Can we solve it better?

./parsimony/functions/multiblock/losses.py:
------------------------------------------
900: # TODO: Check instead if it is a numpy array.

./parsimony/functions/nesterov/tv.py:
------------------------------------
158: # TODO: This only work if the elements of self._A are scipy.sparse. We
159: # should allow dense matrices as well.

162: # TODO: Instead of p, this should really be the number of non-zero
163: # rows of A.

173: # TODO: Add max_iter here!

./parsimony/functions/nesterov/l1tv.py:
--------------------------------------
62: # WARNING: Number of non-zero rows may differ from p.

146: # TODO: Instead of p, this should really be the number of non-zero
147: # rows of A.

158: # TODO: Add max_iter here!!

267: # TODO: Do we need to take the number of variables here?
268: # Why not use np.prod(shape) + penalty_start instead and save a parameter?

291: # TODO: Do we need to take the number of variables here?
292: # Why not use np.prod(shape) + penalty_start instead and save a parameter?

./parsimony/functions/nesterov/grouptv.py:
-----------------------------------------
158: # TODO: This only work if the elements of self._A are scipy.sparse. We
159: # should allow dense matrices as well.

165: # TODO: Add max_iter here!

./parsimony/datasets/regression/dice5.py:
----------------------------------------
36: # TODO: This is wrong. Shape should be Z, Y, X.

./parsimony/algorithms/nipals.py:
--------------------------------
32: # TODO: Add information about the run.

./parsimony/algorithms/utils.py:
-------------------------------
34: # TODO: This class should be replaced with Enum.

266: # TODO: We already have f_mid, so we can return a better approximation
267: # here!

357: # TODO: Handle the other cases!

369: # TODO: We seek a root, i.e. where f(x) = 0. The stopping criterion
370: #       should (could?) thus be abs(f(x)) <= eps!

389: if abs(x - x_) <= self.eps:  # TODO: Stopping criterion. See above!

./parsimony/algorithms/bases.py:
-------------------------------
61: # TODO: Replace the one in BaseAlgorithm.

./parsimony/algorithms/proximal.py:
----------------------------------
329: # TODO: Warn if G_new < -consts.TOLERANCE.

352: else:  # TODO: Fix this!

500: # TODO: Warn if Gamma < -consts.TOLERANCE.

679: # TODO: Warn if Gamma < -consts.TOLERANCE.

827: # TODO: Investigate what is a good default value here!

883: y_new = x_new  # TODO: Allow a linear operator here.

959: # TODO: Investigate what is a good default value here!

1013: # TODO: Investigate what is a good default value here!

1066: # TODO: Investigate what is a good default value here!

1105: # TODO: Does the weights really matter when the function is the
1106: # indicator function?

1140: # TODO: Investigate what is a good default value here!

